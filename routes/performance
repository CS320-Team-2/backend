var express = require('express');
const knex = require('knex');
const knexConfig = require('../knexfile.js');
const pool = knex(knexConfig);
var router = express.Router();
//Get performance review of a certain employee
/*router.get('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  pool.select('*').from('performance').where("to_employee", id).then((data) => {
    res.status(200).json(data);
  }).catch((err) => {
    res.status(500).end();
  });
});*/
//Get performance reviews given by a certain employee
router.get('/:id', (req, res) => {
    const id = parseInt(req.params.id);
    pool.select('*').from('performance').where("from_employee", id).then((data) => {
      res.status(200).json({"list": data});
    }).catch((err) => {
      res.status(500).end();
    });
  });

  //Get ALL performance reviews 
router.get('/', (req, res) => {
  pool.select('*').from('performance').then((data) => {
    res.status(200).json({"list": data});
  }).catch((err) => {
    res.status(500).end();
  });
});
// router.get('/:id', (req, res) => {
//     const id = parseInt(req.params.id);
//     pool.select('*').from('performance').where("id", id).then((data) => {
//       res.status(200).json(data);
//     }).catch((err) => {
//       res.status(500).end();
//     });
//   });
//Post a  entry of a paid time request through the req.body
router.post('/', (req, res) => {
  pool.select('*').from('performance').then((data) => {
          let max = 0;
          let performance_data = data;
          for (let i = 0; i < performance_data.length; i++) {
              if (performance_data[i].id > max) {
                  max = performance_data[i].id;
              }
          }
          return max;
      })
      .then(id => {
          id++;
          let attributes = req.body;
          attributes.id = id
          pool.insert(attributes).into('performance')
              .then(() => {
                  res.send(attributes);
              })
              .catch(() => {
                  res.status(500).end();
              });
      })
      .catch((err) => {
          res.status(500).end();
      });
  res.status(200).end();
});

//Update Performance Request with ID in req.body
//Updated json with new attributes of perf request is passed in through req.body
//New json can contain any number of attributes (any attributes not present will stay what they were before)
//HOWEVER, the json must contain an ID or the system will return an error
//Ex. sending a PUT request at URL localhost:3000/pto
//with a req.body of     
    // {
    //     "id": 5,
        // "growth": 9,
        // "kindness": 10,
    // }
//would update the perf request with ID 5's growth to 9 etc (given that the other attributes were the same as before)

router.put('/', (req, res) => {
  //console.log(req.body);
  const id = req.body.id;
  pool("performance").where("id", id).update(req.body).then(function (count) {
    //console.log(count);
    res.send("successfully put");
    res.status(200).end();
  }).catch((err) => {
    // Send a 500 (internal server error) if something goes wrong (rejected promises are not caught by express).
    res.send("put error");
    res.status(500).end();
  })
});

//Update using id in url
//Update Request based on ID
//ID is passed in as a parameter through the URL
//New updated entry is passed as a JSON in req.body
//Ex. sending a PUT request at URL localhost:3000/performance/123 
//with a req.body of {'delivery' = 1} 
//would update delivery of the Perfornace request with ID 123 to 1
router.put('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  pool("performance").where("id", id).update(req.body).then(function (count) {
    res.send("successfully put");
    res.status(200).end();
  }).catch((err) => {
    // Send a 500 (internal server error) if something goes wrong (rejected promises are not caught by express).
    res.send("put error");
    res.status(500).end();
  })
});

//Delete performance request based on ID
//Ex. sending a delete request at URL
router.delete('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  //console.log(id)
  pool("performance").where("id", id).del().then(function (count) {
    res.send("successfully deleted");
    res.status(200).end();
  }).catch((err) => {
    // Send a 500 (internal server error) if something goes wrong (rejected promises are not caught by express).
    res.send("del error");
    res.status(500).end();
  })
});
module.exports = router;